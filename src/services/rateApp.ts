// src/services/rateApp.ts
import { Alert, Linking, Platform } from 'react-native';
import InAppReview from 'react-native-in-app-review';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { t } from '../utils/i18nProxy';
/**
 * ‚úÖ H∆Ø·ªöNG D·∫™N
 * - G·ªçi onAppOpened() ·ªü App.tsx m·ªói l·∫ßn app m·ªü (ho·∫∑c khi v√†o Home) ƒë·ªÉ ƒë·∫øm s·ªë l·∫ßn m·ªü.
 * - Khi user l√†m xong h√†nh ƒë·ªông ‚Äúh√†i l√≤ng‚Äù (tr·∫£ ph√≤ng xong, thanh to√°n xong, ‚Ä¶) g·ªçi markHappyEvent().
 * - ƒê·ªÉ hi·ªÉn th·ªã popup ƒë√°nh gi√° theo ƒëi·ªÅu ki·ªán ‚Üí g·ªçi maybeAskForReview().
 * - N√∫t ‚Äúƒê√°nh gi√° ·ª©ng d·ª•ng‚Äù n√™n g·ªçi maybeAskForReview(true) ƒë·ªÉ √©p hi·ªÉn th·ªã (DEV s·∫Ω hi·ªán Alert fallback).
 */

// ‚öôÔ∏è THAM S·ªê C·∫¶N S·ª¨A CHO APP C·ª¶A B·∫†N
const ANDROID_PACKAGE_NAME = 'com.yourcompany.yourapp'; // v√≠ d·ª•: com.mycompany.myapp
const IOS_APP_ID = '6752760921'; // App Store numeric ID, v√≠ d·ª•: 6471234567

// ‚è± Ng∆∞·ª°ng h·ªèi t·ª± ƒë·ªông
const MIN_DAYS_SINCE_INSTALL = 3;   // √≠t nh·∫•t 3 ng√†y t·ª´ l·∫ßn m·ªü ƒë·∫ßu ti√™n
const MIN_OPENS = 5;                // √≠t nh·∫•t 5 l·∫ßn m·ªü app
const HAPPY_EVENTS_THRESHOLD = 2;   // √≠t nh·∫•t 2 ‚Äús·ª± ki·ªán h√†i l√≤ng‚Äù
const COOL_DOWN_DAYS = 60;          // kh√¥ng h·ªèi l·∫°i trong v√≤ng 60 ng√†y

// üîë Storage keys
const K_FIRST_OPEN   = 'rateapp.first_open';
const K_OPEN_COUNT   = 'rateapp.open_count';
const K_HAPPY_EVENTS = 'rateapp.happy_events';
const K_LAST_PROMPT  = 'rateapp.last_prompt';
const K_DONT_ASK     = 'rateapp.dont_ask';
const K_RATED        = 'rateapp.has_rated';

// ---------- Storage helpers ----------
async function getNum(key: string, fallback: number): Promise<number> {
  try { const v = await AsyncStorage.getItem(key); return v ? Number(v) : fallback; } catch { return fallback; }
}
async function setNum(key: string, v: number) {
  try { await AsyncStorage.setItem(key, String(v)); } catch {}
}
async function getBool(key: string): Promise<boolean> {
  try { const v = await AsyncStorage.getItem(key); return v === '1' || v === 'true'; } catch { return false; }
}
async function setBool(key: string, v: boolean) {
  try { await AsyncStorage.setItem(key, v ? '1' : '0'); } catch {}
}

// ---------- Date helpers ----------
function daysBetween(tsA: number, tsB: number) {
  const d = Math.abs(tsB - tsA) / (1000 * 60 * 60 * 24);
  return Math.floor(d);
}

// ---------- Public API ----------
/** G·ªçi khi app m·ªü (ho·∫∑c khi user v√†o m√†n h√¨nh ch√≠nh) ƒë·ªÉ ƒë·∫øm s·ªë l·∫ßn m·ªü */
export async function onAppOpened() {
  const now = Date.now();
  const first = await getNum(K_FIRST_OPEN, 0);
  if (!first) await setNum(K_FIRST_OPEN, now);
  const opens = await getNum(K_OPEN_COUNT, 0);
  await setNum(K_OPEN_COUNT, opens + 1);
}

/** G·ªçi khi user c√≥ ‚Äúh√†nh ƒë·ªông h√†i l√≤ng‚Äù (v√≠ d·ª•: t·∫•t to√°n th√†nh c√¥ng) */
export async function markHappyEvent() {
  const n = await getNum(K_HAPPY_EVENTS, 0);
  await setNum(K_HAPPY_EVENTS, n + 1);
}

/** Cho user ch·ªçn ‚ÄúKh√¥ng h·ªèi l·∫°i‚Äù */
export async function neverAskAgain() {
  await setBool(K_DONT_ASK, true);
}

/** N·∫øu b·∫°n m·ªü store ra r·ªìi ‚Üí c√≥ th·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë√°nh gi√° */
export async function markRated() {
  await setBool(K_RATED, true);
}

/** D√πng trong DEV ƒë·ªÉ test l·∫°i lu·ªìng */
export async function resetRateAppDevOnly() {
  await AsyncStorage.multiRemove([
    K_FIRST_OPEN, K_OPEN_COUNT, K_HAPPY_EVENTS, K_LAST_PROMPT, K_DONT_ASK, K_RATED,
  ]);
}

// ---------- Store links ----------
async function openStoreReviewPage() {
  try {
    if (Platform.OS === 'android') {
      const marketUrl = `market://details?id=${ANDROID_PACKAGE_NAME}`;
      const webUrl = `https://play.google.com/store/apps/details?id=${ANDROID_PACKAGE_NAME}`;
      const canOpen = await Linking.canOpenURL(marketUrl);
      await Linking.openURL(canOpen ? marketUrl : webUrl);
    } else {
      const url = `https://apps.apple.com/app/id${IOS_APP_ID}?action=write-review`;
      await Linking.openURL(url);
    }
    await setBool(K_RATED, true);
  } catch {
    // nu·ªët l·ªói m·ªü link
  }
}

export function showFallbackAlert() {
  Alert.alert(
    t('rate.title', 'ƒê√°nh gi√° ·ª©ng d·ª•ng'),
    t('rate.message', 'B·∫°n th·∫•y app h·ªØu √≠ch ch·ª©? Vui l√≤ng ƒë√°nh gi√° ƒë·ªÉ ·ªßng h·ªô nh√©!'),
    [
      { text: t('rate.later', 'ƒê·ªÉ sau'), style: 'cancel' },
      {
        text:t('rate.never', 'Kh√¥ng h·ªèi l·∫°i'),
        onPress: async () => { await setBool(K_DONT_ASK, true); },
      },
      {
        text:t('rate.now', 'ƒê√°nh gi√° ngay'),
        onPress: async () => {
          await openStoreReviewPage();
          await setBool(K_DONT_ASK, true);
        },
      },
    ],
    { cancelable: true },
  );
}

/**
 * H·ªèi ƒë√°nh gi√°:
 * - force = true: b·∫•m n√∫t ‚Äúƒê√°nh gi√° ·ª©ng d·ª•ng‚Äù ‚Üí lu√¥n c·ªë g·∫Øng hi·ªÉn th·ªã ngay.
 *   - DEV ho·∫∑c InAppReview kh√¥ng kh·∫£ d·ª•ng ‚Üí hi·ªán Alert fallback m·ªü th·∫≥ng Store.
 *   - N·∫øu g·ªçi InAppReview ƒë∆∞·ª£c ‚Üí ƒë·∫∑t c·ªù ‚Äúdont_ask‚Äù ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ti·∫øp.
 * - force = false: ch·ªâ hi·ªÉn th·ªã khi ƒë·∫°t ng∆∞·ª°ng (ng√†y/ƒë·∫øm m·ªü/s·ª± ki·ªán h√†i l√≤ng/cooldown).
 */
export async function maybeAskForReview(force = false) {
  const dontAsk = await getBool(K_DONT_ASK);
  const rated = await getBool(K_RATED);
  if (!force && (dontAsk || rated)) return;

  if (force) {
    if (__DEV__ || !InAppReview.isAvailable()) {
      showFallbackAlert();
      return;
    }
    try {
      const ok = await InAppReview.RequestInAppReview();
      if (!ok) {
        // Kh√¥ng ƒë·∫£m b·∫£o hi·ªÉn th·ªã ‚Üí c√≥ th·ªÉ fallback cho UX t·ªët h∆°n
        showFallbackAlert();
      } else {
        // N·∫øu ƒë√£ hi·ªÉn th·ªã, ƒë·∫∑t c·ªù ƒë·ªÉ kh√¥ng l√†m phi·ªÅn
        await setBool(K_DONT_ASK, true);
      }
    } catch {
      showFallbackAlert();
    }
    return;
  }

  // Lu·ªìng t·ª± ƒë·ªông
  const now = Date.now();
  const first = await getNum(K_FIRST_OPEN, now);
  const opens = await getNum(K_OPEN_COUNT, 0);
  const happy = await getNum(K_HAPPY_EVENTS, 0);
  const lastPromptTs = await getNum(K_LAST_PROMPT, 0);

  const okDays = daysBetween(first, now) >= MIN_DAYS_SINCE_INSTALL;
  const okOpens = opens >= MIN_OPENS;
  const okHappy = happy >= HAPPY_EVENTS_THRESHOLD;
  const coolDownOk = lastPromptTs === 0 || daysBetween(lastPromptTs, now) >= COOL_DOWN_DAYS;

  if (!(okDays && okOpens && okHappy && coolDownOk)) return;
  await setNum(K_LAST_PROMPT, now);

  if (InAppReview.isAvailable()) {
    try {
      const ok = await InAppReview.RequestInAppReview();
      if (ok) await setBool(K_DONT_ASK, true);
    } catch {
      // Kh√¥ng l√†m g√¨ th√™m ·ªü lu·ªìng auto (tr√°nh l√†m phi·ªÅn)
    }
  }
}
